{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["proxy","App","useState","keyword","setKeyword","lists","result","setResult","play","setPlay","current","setCurrentTime","duration","setDuration","className","style","color","aria-label","id","src","autoPlay","onProgress","e","length","console","log","setProgress","nativeEvent","target","currentTime","width","type","value","onChange","onClick","params","FormData","set","axios","post","then","res","data","preventDefault","class","min","max","textAlign","fontSize","map","item","idx","key","href","no","playMusic","backgroundColor","padding","borderRadius","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b177a0c1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport '98.css';\nimport AudioSpectrum from \"react-audio-spectrum\"\nconst proxy = \"https://cors-anywhere.herokuapp.com/\"\nfunction App() {\n  const [keyword, setKeyword] = useState(\"\")\n  const [result, setResult] = useState({ lists: [] })\n  const [play, setPlay] = useState(\"\")\n  const [current, setCurrentTime] = useState(0)\n  const [duration, setDuration] = useState(100)\n\n  const onSearchClick = (e) => {\n    let params = new FormData()\n    params.set(\"skey\", keyword)\n    params.set(\"no_pagination\", \"1\")\n    params.set(\"num_per_page\", \"100\")\n    axios.post(proxy + \"http://uriminzokkiri.com/index.php?ptype=cmusic&mtype=writeList\", params)\n      .then(res => {\n        console.log(res.data)\n        setResult(res.data)\n      })\n\n    e.preventDefault()\n  }\n  const playMusic = (no) => {\n    let params = new FormData()\n    params.set(\"no\", no + \"pl\")\n    axios.post(proxy + \"http://uriminzokkiri.com/index.php?ptype=cmusic&mtype=play\", params)\n      .then(res => {\n        console.log(\"http://uriminzokkiri.com/\" + res.data[0][\"src\"])\n        setPlay(\"http://uriminzokkiri.com/\" + res.data[0][\"src\"])\n      })\n\n\n  }\n  const renderSearchResult = () => {\n    const content = result.lists.map((item, idx) =>\n      <tr key={idx}>\n        <td>{item[\"no\"]}</td>\n        <td>{item[\"reg_date\"]}</td>\n        <td>{item[\"hit\"]}</td>\n        <td>{item[\"key_word\"]}</td>\n        <td>{item[\"title\"]}</td>\n        <td><a href={`http://uriminzokkiri.com/index.php?ptype=cmusic&mtype=download&no=${item[\"no\"]}`}>DL</a></td>\n        <td><button onClick={() => playMusic(item[\"no\"])}>PLAY</button></td>\n      </tr>\n    )\n    return content\n  }\n  const setProgress = (current,length) =>{\n    setCurrentTime(current)\n    setDuration(length)\n    console.log(`CURRENT:${current}/${length}`)\n  }\n  return (\n    <div className=\"App\">\n      <h1 style={{ color: \"white\" }}><span aria-label>ðŸ‡°ðŸ‡µ</span>NK-PLAYER</h1>\n      <audio id=\"audio-element\" src={play} autoPlay onProgress={(e)=>setProgress(e.nativeEvent.target.currentTime,e.nativeEvent.target.duration)}/>\n      {/*\n        <AudioSpectrum\n          id=\"audio-canvas\"\n          height={200}\n          width={300}\n          audioId={'audio-element'}\n          capColor={'red'}\n          capHeight={2}\n          meterWidth={2}\n          meterCount={512}\n          meterColor={[\n            {stop: 0, color: '#f00'},\n            {stop: 0.5, color: '#0CD7FD'},\n            {stop: 1, color: 'red'}\n          ]}\n          gap={4}\n        />\n        */}\n      <div className=\"window\" style={{ width: \"90%\" }}>\n        <div className=\"title-bar\">\n          <div className=\"title-bar-text\">NK-PLAYER</div>\n        </div>\n        <div className=\"window-body\">\n          <div className=\"field-row\">\n            <label>SONG NAME:</label>\n            <input style={{ width: \"100%\" }} type=\"text\" value={keyword} onChange={(e) => { setKeyword(e.target.value) }} />\n            <button onClick={onSearchClick}>SEARCH</button>\n          </div>\n          <br/>\n          <div class=\"field-row\">\n            <input id=\"range22\" type=\"range\" min=\"0\" max={duration} value={current} />\n          </div>\n          <br/>\n          <div className=\"field-row\">\n            <pre style={{ width: \"100%\" }}>\n              <table style={{ width: \"100%\", textAlign: \"left\",fontSize:15 }}>\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>DATE</th>\n                    <th>HOT</th>\n                    <th>KEYWORD</th>\n                    <th>TITLE</th>\n                    <th>DOWNLOAD</th>\n                    <th>PLAY</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {renderSearchResult()}\n                </tbody>\n              </table>\n            </pre>\n          </div>\n        </div>\n      </div>\n      <p style={{ backgroundColor: \"rgba(255, 255, 255, 0.8)\", padding: 5, borderRadius: \"20px\", fontWeight: \"bold\" }}>NK Player | Powered by project sparrow</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}